// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  role              String? // admin, user, guest
  type              String?             @default("consumer") // consumer, merchant
  password          String?
  accounts          Account[]
  sessions          Session[]
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String      @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    String     
  user      User         @relation(fields: [userId], references: [id])
}

model Balance {
  id     Int    @id @default(autoincrement())
  userId String @unique
  amount Int
  locked Int
  user   User   @relation(fields: [userId], references: [id])
}

enum OnRampStatus {
  Success
  Failure
  Processing
}

model ChessUser {
  id String  @id @default(uuid())
  username String? @unique
  name String?
  email String @unique
  provider AuthProvider
  password String?
  rating Int @default(1200)
  gamesAsWhite Game[] @relation("GamesAsWhite")
  gamesAsBlack Game[] @relation("GamesAsBlack")
  createdAt DateTime @default(now())
  lastLogin DateTime?

  @@index([rating])
}

model Game {
  id String @id @default(uuid())
  whitePlayerId String
  blackPlayerId String
  whitePlayer ChessUser @relation ("GamesAsWhite", fields: [whitePlayerId], references:[id])
  blackPlayer ChessUser @relation ("GamesAsBlack", fields: [blackPlayerId], references:[id])
  status GameStatus
  result GameResult?
  timeControl TimeControl
  startingFen   String     @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1") // default value for the startingFen
  currentFen    String?
  startAt DateTime @default(now())
  endAt DateTime?
  moves Move[]
  opening String?
  event String?

  @@index([status,result])
}

model Move {
  id String @id @default(uuid())
  gameId String
  game Game @relation(fields: [gameId],references:[id])
  moveNumber Int
  from String
  to String
  comments String?
  before String
  after String
  timeTaken Int? @default(0)
  createdAt DateTime @default(now())
  san String?

  @@index([gameId])
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIME_UP
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
}

enum TimeControl {
  CLASSICAL
  RAPID
  BLITZ
  BULLET
}

enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
  GITHUB
}